import React, {useMemo, memo} from 'react';
import {Text, TextProps, TextStyle} from 'react-native';
import {makeStyle} from './hooks';
import shadow from './shadow';

export interface TypographyProps extends TextStyle, TextProps {
  children?: React.ReactNode;
}

function TG(props: TypographyProps) {
  const {
    color,
    fontFamily,
    fontSize,
    fontStyle,
    fontWeight,
    letterSpacing,
    lineHeight,
    textAlign,
    textDecorationLine,
    textDecorationStyle,
    textDecorationColor,
    textShadowColor,
    textShadowOffset,
    textShadowRadius,
    textTransform,
    // testID,

    fontVariant,
    writingDirection,

    textAlignVertical,
    includeFontPadding,

    backfaceVisibility,
    backgroundColor,
    borderBottomColor,
    borderBottomEndRadius,
    borderBottomLeftRadius,
    borderBottomRightRadius,
    borderBottomStartRadius,
    borderColor,
    borderEndColor,
    borderLeftColor,
    borderRadius,
    borderRightColor,
    borderStartColor,
    borderStyle,
    borderTopColor,
    borderTopEndRadius,
    borderTopLeftRadius,
    borderTopRightRadius,
    borderTopStartRadius,
    opacity,
    elevation,

    alignContent,
    alignItems,
    alignSelf,
    aspectRatio,
    borderBottomWidth,
    borderEndWidth,
    borderLeftWidth,
    borderRightWidth,
    borderStartWidth,
    borderTopWidth,
    borderWidth,
    bottom,
    display,
    end,
    flex,
    flexBasis,
    flexDirection,
    flexGrow,
    flexShrink,
    flexWrap,
    height,
    justifyContent,
    left,
    margin,
    marginBottom,
    marginEnd,
    marginHorizontal,
    marginLeft,
    marginRight,
    marginStart,
    marginTop,
    marginVertical,
    maxHeight,
    maxWidth,
    minHeight,
    minWidth,
    overflow,
    padding,
    paddingBottom,
    paddingEnd,
    paddingHorizontal,
    paddingLeft,
    paddingRight,
    paddingStart,
    paddingTop,
    paddingVertical,
    position,
    right,
    start,
    top,
    width,
    zIndex,
    direction,

    shadowColor,
    shadowOffset,
    shadowOpacity,
    shadowRadius,

    transform,
    transformMatrix,
    rotation,
    scaleX,
    scaleY,
    translateX,
    translateY,

    style,
    ...others
  } = props;
  const styleProps = useMemo(
    () => ({
      color,
      fontFamily,
      fontSize,
      fontStyle,
      fontWeight,
      letterSpacing,
      lineHeight,
      textAlign,
      textDecorationLine,
      textDecorationStyle,
      textDecorationColor,
      textShadowColor,
      textShadowOffset,
      textShadowRadius,
      textTransform,
      // testID,

      fontVariant,
      writingDirection,

      textAlignVertical,
      includeFontPadding,

      backfaceVisibility,
      backgroundColor,
      borderBottomColor,
      borderBottomEndRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomStartRadius,
      borderColor,
      borderEndColor,
      borderLeftColor,
      borderRadius,
      borderRightColor,
      borderStartColor,
      borderStyle,
      borderTopColor,
      borderTopEndRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopStartRadius,
      opacity,
      elevation,

      alignContent,
      alignItems,
      alignSelf,
      aspectRatio,
      borderBottomWidth,
      borderEndWidth,
      borderLeftWidth,
      borderRightWidth,
      borderStartWidth,
      borderTopWidth,
      borderWidth,
      bottom,
      display,
      end,
      flex,
      flexBasis,
      flexDirection,
      flexGrow,
      flexShrink,
      flexWrap,
      height,
      justifyContent,
      left,
      margin,
      marginBottom,
      marginEnd,
      marginHorizontal,
      marginLeft,
      marginRight,
      marginStart,
      marginTop,
      marginVertical,
      maxHeight,
      maxWidth,
      minHeight,
      minWidth,
      overflow,
      padding,
      paddingBottom,
      paddingEnd,
      paddingHorizontal,
      paddingLeft,
      paddingRight,
      paddingStart,
      paddingTop,
      paddingVertical,
      position,
      right,
      start,
      top,
      width,
      zIndex,
      direction,

      shadowColor,
      shadowOffset,
      shadowOpacity,
      shadowRadius,

      transform,
      transformMatrix,
      rotation,
      scaleX,
      scaleY,
      translateX,
      translateY,
    }),
    [
      alignContent,
      alignItems,
      alignSelf,
      aspectRatio,
      backfaceVisibility,
      backgroundColor,
      borderBottomColor,
      borderBottomEndRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomStartRadius,
      borderBottomWidth,
      borderColor,
      borderEndColor,
      borderEndWidth,
      borderLeftColor,
      borderLeftWidth,
      borderRadius,
      borderRightColor,
      borderRightWidth,
      borderStartColor,
      borderStartWidth,
      borderStyle,
      borderTopColor,
      borderTopEndRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopStartRadius,
      borderTopWidth,
      borderWidth,
      bottom,
      color,
      direction,
      display,
      elevation,
      end,
      flex,
      flexBasis,
      flexDirection,
      flexGrow,
      flexShrink,
      flexWrap,
      fontFamily,
      fontSize,
      fontStyle,
      fontVariant,
      fontWeight,
      height,
      includeFontPadding,
      justifyContent,
      left,
      letterSpacing,
      lineHeight,
      margin,
      marginBottom,
      marginEnd,
      marginHorizontal,
      marginLeft,
      marginRight,
      marginStart,
      marginTop,
      marginVertical,
      maxHeight,
      maxWidth,
      minHeight,
      minWidth,
      opacity,
      overflow,
      padding,
      paddingBottom,
      paddingEnd,
      paddingHorizontal,
      paddingLeft,
      paddingRight,
      paddingStart,
      paddingTop,
      paddingVertical,
      position,
      right,
      rotation,
      scaleX,
      scaleY,
      shadowColor,
      shadowOffset,
      shadowOpacity,
      shadowRadius,
      start,
      textAlign,
      textAlignVertical,
      textDecorationColor,
      textDecorationLine,
      textDecorationStyle,
      textShadowColor,
      textShadowOffset,
      textShadowRadius,
      textTransform,
      top,
      transform,
      transformMatrix,
      translateX,
      translateY,
      width,
      writingDirection,
      zIndex,
    ],
  );
  const styles = useStyle(styleProps);
  return <Text {...others} style={[styles.text, style]} />;
}

export const Typography = memo(TG);
export default Typography;

const useStyle = makeStyle(({elevation, ...others}) => ({
  text: {
    ...others,
    ...shadow(elevation),
  },
}));
