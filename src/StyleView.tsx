import React, {forwardRef} from 'react';
import {View, ViewStyle, ViewProps, Animated} from 'react-native';
// import {makeStyle} from './hooks';
import shadow from './shadow';

export interface StyleViewProps extends ViewStyle, ViewProps {
  children?: React.ReactNode;
  animated?: boolean;
}

export const StyleView = forwardRef<View, StyleViewProps>((props, ref) => {
  const {
    backfaceVisibility,
    backgroundColor,
    borderBottomColor,
    borderBottomEndRadius,
    borderBottomLeftRadius,
    borderBottomRightRadius,
    borderBottomStartRadius,
    borderColor,
    borderEndColor,
    borderLeftColor,
    borderRadius,
    borderRightColor,
    borderStartColor,
    borderStyle,
    borderTopColor,
    borderTopEndRadius,
    borderTopLeftRadius,
    borderTopRightRadius,
    borderTopStartRadius,
    opacity,
    // testID,
    elevation,

    alignContent,
    alignItems,
    alignSelf,
    aspectRatio,
    borderBottomWidth,
    borderEndWidth,
    borderLeftWidth,
    borderRightWidth,
    borderStartWidth,
    borderTopWidth,
    borderWidth,
    bottom,
    display,
    end,
    flex,
    flexBasis,
    flexDirection,
    flexGrow,
    flexShrink,
    flexWrap,
    height,
    justifyContent,
    left,
    margin,
    marginBottom,
    marginEnd,
    marginHorizontal,
    marginLeft,
    marginRight,
    marginStart,
    marginTop,
    marginVertical,
    maxHeight,
    maxWidth,
    minHeight,
    minWidth,
    overflow,
    padding,
    paddingBottom,
    paddingEnd,
    paddingHorizontal,
    paddingLeft,
    paddingRight,
    paddingStart,
    paddingTop,
    paddingVertical,
    position,
    right,
    start,
    top,
    width,
    zIndex,
    direction,

    shadowColor,
    shadowOffset,
    shadowOpacity,
    shadowRadius,

    transform,
    transformMatrix,
    rotation,
    scaleX,
    scaleY,
    translateX,
    translateY,
    animated,
    style,
    ...others
  } = props;

  const styles = [
    {
      backfaceVisibility,
      backgroundColor,
      borderBottomColor,
      borderBottomEndRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomStartRadius,
      borderColor,
      borderEndColor,
      borderLeftColor,
      borderRadius,
      borderRightColor,
      borderStartColor,
      borderStyle,
      borderTopColor,
      borderTopEndRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopStartRadius,
      opacity,
      // testID,
      // elevation,
      ...shadow(elevation),

      alignContent,
      alignItems,
      alignSelf,
      aspectRatio,
      borderBottomWidth,
      borderEndWidth,
      borderLeftWidth,
      borderRightWidth,
      borderStartWidth,
      borderTopWidth,
      borderWidth,
      bottom,
      display,
      end,
      flex,
      flexBasis,
      flexDirection,
      flexGrow,
      flexShrink,
      flexWrap,
      height,
      justifyContent,
      left,
      margin,
      marginBottom,
      marginEnd,
      marginHorizontal,
      marginLeft,
      marginRight,
      marginStart,
      marginTop,
      marginVertical,
      maxHeight,
      maxWidth,
      minHeight,
      minWidth,
      overflow,
      padding,
      paddingBottom,
      paddingEnd,
      paddingHorizontal,
      paddingLeft,
      paddingRight,
      paddingStart,
      paddingTop,
      paddingVertical,
      position,
      right,
      start,
      top,
      width,
      zIndex,
      direction,

      shadowColor,
      shadowOffset,
      shadowOpacity,
      shadowRadius,

      transform,
      transformMatrix,
      rotation,
      scaleX,
      scaleY,
      translateX,
      translateY,
      // animated,
    },
    style,
  ];
  if (animated) {
    return <Animated.View {...others} style={styles} />;
  }
  return <View ref={ref} {...others} style={styles} />;
});

StyleView.defaultProps = {
  animated: false,
  elevation: 0,
};

export default StyleView;

// const useStyle = makeStyle(({elevation, ...others}) => ({
//   container: {
//     ...others,
//     ...shadow(elevation),
//   },
// }));
