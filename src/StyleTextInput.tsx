import React, {forwardRef} from 'react';
import {TextInput, TextInputProps, TextStyle} from 'react-native';
// import {makeStyle} from './hooks';
import shadow from './shadow';
import {useStyleContext} from './Context';

export interface StyleTextInputProps extends TextStyle, TextInputProps {}

export const StyleTextInput = forwardRef<TextInput, StyleTextInputProps>(
  (props, ref) => {
    const defaultFontFamily = useStyleContext().fontFamily;
    const {
      color,
      fontFamily = defaultFontFamily,
      fontSize,
      fontStyle,
      fontWeight,
      letterSpacing,
      lineHeight,
      textAlign,
      textDecorationLine,
      textDecorationStyle,
      textDecorationColor,
      textShadowColor,
      textShadowOffset,
      textShadowRadius,
      textTransform,
      // testID,

      fontVariant,
      writingDirection,

      textAlignVertical,
      includeFontPadding,

      backfaceVisibility,
      backgroundColor,
      borderBottomColor,
      borderBottomEndRadius,
      borderBottomLeftRadius,
      borderBottomRightRadius,
      borderBottomStartRadius,
      borderColor,
      borderEndColor,
      borderLeftColor,
      borderRadius,
      borderRightColor,
      borderStartColor,
      borderStyle,
      borderTopColor,
      borderTopEndRadius,
      borderTopLeftRadius,
      borderTopRightRadius,
      borderTopStartRadius,
      opacity,
      elevation,

      alignContent,
      alignItems,
      alignSelf,
      aspectRatio,
      borderBottomWidth,
      borderEndWidth,
      borderLeftWidth,
      borderRightWidth,
      borderStartWidth,
      borderTopWidth,
      borderWidth,
      bottom,
      display,
      end,
      flex,
      flexBasis,
      flexDirection,
      flexGrow,
      flexShrink,
      flexWrap,
      height,
      justifyContent,
      left,
      margin,
      marginBottom,
      marginEnd,
      marginHorizontal,
      marginLeft,
      marginRight,
      marginStart,
      marginTop,
      marginVertical,
      maxHeight,
      maxWidth,
      minHeight,
      minWidth,
      overflow,
      padding,
      paddingBottom,
      paddingEnd,
      paddingHorizontal,
      paddingLeft,
      paddingRight,
      paddingStart,
      paddingTop,
      paddingVertical,
      position,
      right,
      start,
      top,
      width,
      zIndex,
      direction,

      shadowColor,
      shadowOffset,
      shadowOpacity,
      shadowRadius,

      transform,
      transformMatrix,
      rotation,
      scaleX,
      scaleY,
      translateX,
      translateY,

      style,
      ...others
    } = props;
    const styles = [
      {
        color,
        fontFamily,
        fontSize,
        fontStyle,
        fontWeight,
        letterSpacing,
        lineHeight,
        textAlign,
        textDecorationLine,
        textDecorationStyle,
        textDecorationColor,
        textShadowColor,
        textShadowOffset,
        textShadowRadius,
        textTransform,
        // testID,

        fontVariant,
        writingDirection,

        textAlignVertical,
        includeFontPadding,

        backfaceVisibility,
        backgroundColor,
        borderBottomColor,
        borderBottomEndRadius,
        borderBottomLeftRadius,
        borderBottomRightRadius,
        borderBottomStartRadius,
        borderColor,
        borderEndColor,
        borderLeftColor,
        borderRadius,
        borderRightColor,
        borderStartColor,
        borderStyle,
        borderTopColor,
        borderTopEndRadius,
        borderTopLeftRadius,
        borderTopRightRadius,
        borderTopStartRadius,
        opacity,
        // elevation,
        ...shadow(elevation),

        alignContent,
        alignItems,
        alignSelf,
        aspectRatio,
        borderBottomWidth,
        borderEndWidth,
        borderLeftWidth,
        borderRightWidth,
        borderStartWidth,
        borderTopWidth,
        borderWidth,
        bottom,
        display,
        end,
        flex,
        flexBasis,
        flexDirection,
        flexGrow,
        flexShrink,
        flexWrap,
        height,
        justifyContent,
        left,
        margin,
        marginBottom,
        marginEnd,
        marginHorizontal,
        marginLeft,
        marginRight,
        marginStart,
        marginTop,
        marginVertical,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        overflow,
        padding,
        paddingBottom,
        paddingEnd,
        paddingHorizontal,
        paddingLeft,
        paddingRight,
        paddingStart,
        paddingTop,
        paddingVertical,
        position,
        right,
        start,
        top,
        width,
        zIndex,
        direction,

        shadowColor,
        shadowOffset,
        shadowOpacity,
        shadowRadius,

        transform,
        transformMatrix,
        rotation,
        scaleX,
        scaleY,
        translateX,
        translateY,
      },
      style,
    ];
    return <TextInput ref={ref} style={styles} {...others} />;
  },
);

export default StyleTextInput;

// const useStyle = makeStyle(({elevation, ...others}) => ({
//   container: {
//     ...others,
//     ...shadow(elevation),
//   },
// }));
